data
1
3 3 3
1 2 3
4 5 6
7 8 9
3 10 20 30
3 40 50 60
3 70 80 90
3
end"use strict";

const fs = require("fs");

process.stdin.resume();
process.stdin.setEncoding("utf-8");

let inputString = "";
let currentLine = 0;

process.stdin.on("data", inputStdin => {
  inputString += inputStdin;
});

process.stdin.on("end", _ => {
  inputString = inputString
    .trim()
    .split("\n")
    .map(str => str.trim());

  main();
});

function readLine() {
  return inputString[currentLine++];
}

/*
 * Complete the guestTable function below.
 */
function guestTable(generosities) {
  /*
   * Write your code here.
   */
}

/*
 * Complete the solve function below.
 */
function solve() {
  /*
   * Write your code here.
   */
}

function main() {
  for (let tcItr = 0; tcItr < tc; tcItr++) {
    const mn = readLine().split(" ");

    const m = parseInt(mn[0], 10);

    const n = parseInt(mn[1], 10);

    let charm = Array(m);

    for (let charmRowItr = 0; charmRowItr < m; charmRowItr++) {
      charm[charmRowItr] = readLine()
        .split(" ")
        .map(charmTemp => parseInt(charmTemp, 10));
    }

    const t = parseInt(readLine(), 10);

    for (let tItr = 0; tItr < t; tItr++) {
      const x = parseInt(readLine(), 10);

      const generosities = readLine()
        .split(" ")
        .map(generositiesTemp => parseInt(generositiesTemp, 10));

      guestTable(generosities);
    }

    const k = parseInt(readLine(), 10);

    solve();

    console.log("finished!");
  }
}
